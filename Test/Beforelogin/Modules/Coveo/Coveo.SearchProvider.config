<!--
    Do not modify this configuration file.
    Instead, you should patch this file using Coveo.SearchProvider.Custom.config.
    See Coveo.SearchProvider.Custom.config for additional description of the configuration elements.
-->
<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/" xmlns:coveo="http://www.sitecore.net/xmlconfig/coveo/" xmlns:role="http://www.sitecore.net/xmlconfig/role/" xmlns:set="http://www.sitecore.net/xmlconfig/set/">
  <sitecore coveo:require="!disabled">
    <events timingLevel="custom">
      <event name="coveo:config:cloudConnectionChanged">
        <handler type="Coveo.SearchProvider.Events.ExpandedPermissionsEventHandler, Coveo.SearchProviderBase" method="OnCloudConnectionChanged" />
      </event>
      <event name="coveo:indexing:afterSetupRequirements">
        <handler type="Coveo.SearchProvider.Events.ExpandedPermissionsEventHandler, Coveo.SearchProviderBase" method="OnAfterSetupRequirements" />
        <handler type="Coveo.SearchProvider.Events.CachedFieldsEventHandler, Coveo.SearchProviderBase" method="OnAfterSetupRequirements" />
      </event>
      <event name="item:created">
        <handler type="Coveo.SearchProvider.Processors.Indexing.Templates.TemplateInUseEventHandler, Coveo.SearchProviderBase" method="OnItemCreated" />
      </event>
      <event name="item:templateChanged">
        <handler type="Coveo.SearchProvider.Processors.Indexing.Templates.TemplateInUseEventHandler, Coveo.SearchProviderBase" method="OnItemTemplateChanged" />
      </event>
      <event name="item:deleting">
        <handler role:require="!ContentDelivery" type="Coveo.SearchProvider.Events.SetupRequirementsEventHandler, Coveo.SearchProviderBase" method="OnItemDeleting" />
      </event>
      <event name="item:moved">
        <handler type="Coveo.SearchProvider.Processors.Indexing.Templates.TemplateInUseEventHandler, Coveo.SearchProviderBase" method="OnItemMoved" />
      </event>
      <event name="item:saved">
        <handler type="Coveo.SearchProvider.Processors.Indexing.Templates.TemplateInUseEventHandler, Coveo.SearchProviderBase" method="OnItemSaved" />
        <handler role:require="!ContentDelivery" type="Coveo.SearchProvider.Events.SetupRequirementsEventHandler, Coveo.SearchProviderBase" method="OnItemSaved" />
      </event>
      <event name="user:updated">
        <handler type="Coveo.SearchProvider.Events.ExpandedPermissionsEventHandler, Coveo.SearchProviderBase" method="OnUserUpdated" />
        <handler type="Coveo.SearchProvider.Events.EntityEventHandler, Coveo.SearchProviderBase" method="OnUserUpdated"/>
      </event>
      <event name="user:deleted">
        <handler type="Coveo.SearchProvider.Events.ExpandedPermissionsEventHandler, Coveo.SearchProviderBase" method="OnUserDeleted" />
        <handler type="Coveo.SearchProvider.Events.EntityEventHandler, Coveo.SearchProviderBase" method="OnUserDeleted"/>
      </event>
      <event name="role:created">
        <handler type="Coveo.SearchProvider.Events.ExpandedPermissionsEventHandler, Coveo.SearchProviderBase" method="OnRoleCreated" />
        <handler type="Coveo.SearchProvider.Events.EntityEventHandler, Coveo.SearchProviderBase" method="OnRoleCreated"/>
      </event>
      <event name="role:deleted">
        <handler type="Coveo.SearchProvider.Events.ExpandedPermissionsEventHandler, Coveo.SearchProviderBase" method="OnRoleDeleted" />
        <handler type="Coveo.SearchProvider.Events.EntityEventHandler, Coveo.SearchProviderBase" method="OnRoleDeleted"/>
      </event>
      <event name="roles:usersAdded">
        <handler type="Coveo.SearchProvider.Events.ExpandedPermissionsEventHandler, Coveo.SearchProviderBase" method="OnUsersAddedToRole" />
        <handler type="Coveo.SearchProvider.Events.EntityEventHandler, Coveo.SearchProviderBase" method="OnUsersAddedToRole"/>
      </event>
      <event name="roles:usersRemoved">
        <handler type="Coveo.SearchProvider.Events.ExpandedPermissionsEventHandler, Coveo.SearchProviderBase" method="OnUsersRemovedFromRole" />
        <handler type="Coveo.SearchProvider.Events.EntityEventHandler, Coveo.SearchProviderBase" method="OnUsersRemovedFromRole"/>
      </event>
      <event name="roles:rolesAdded">
        <handler type="Coveo.SearchProvider.Events.ExpandedPermissionsEventHandler, Coveo.SearchProviderBase" method="OnRolesAddedToRoles" />
        <handler type="Coveo.SearchProvider.Events.EntityEventHandler, Coveo.SearchProviderBase" method="OnRolesAddedToRoles"/>
      </event>
      <event name="roles:rolesRemoved">
        <handler type="Coveo.SearchProvider.Events.ExpandedPermissionsEventHandler, Coveo.SearchProviderBase" method="OnRolesRemovedFromRoles" />
        <handler type="Coveo.SearchProvider.Events.EntityEventHandler, Coveo.SearchProviderBase" method="OnRolesRemovedFromRoles"/>
      </event>
    </events>
    <factories>
      <factory id="remoteListFactory" type="Coveo.SearchProvider.RemoteListFactory, Coveo.SearchProviderBase" />
      <factory id="excludedFieldsFactory" type="Coveo.SearchProvider.FirstAvailableRemoteListFactory, Coveo.SearchProviderBase">
        <xpaths hint="list:AddXPath">
          <xpath name="Solr">contentSearch/indexConfigurations/defaultSolrIndexConfiguration/documentOptions//exclude[@hint='list:AddExcludedField']</xpath>
          <xpath name="Azure">contentSearch/indexConfigurations/defaultCloudIndexConfiguration/documentOptions//exclude[@hint='list:AddExcludedField']</xpath>
        </xpaths>
      </factory>
    </factories>
    <pipelines>
      <renderContentEditor>
        <!-- The HideContentEditorFields processor hides sections and fields in the Content Editor. -->
        <processor patch:before="*[@type='Sitecore.Shell.Applications.ContentEditor.Pipelines.RenderContentEditor.RenderSkinedContentEditor, Sitecore.Client']" type="Coveo.SearchProvider.Processors.ContentEditor.HideContentEditorFields, Coveo.SearchProviderBase" />
        <!-- The CoveoRenderContentEditor processor hides sections in the Content Editor based on available features. -->
        <processor patch:before="*[@type='Sitecore.Shell.Applications.ContentEditor.Pipelines.RenderContentEditor.RenderSkinedContentEditor, Sitecore.Client']" type="Coveo.SearchProvider.Licensing.Processors.CoveoRenderContentEditor, Coveo.SearchProvider.Licensing" />
      </renderContentEditor>
      <getContentEditorWarnings>
        <!-- The CoveoRecommendationsWarningProcessor validates that the Coveo ML Recommendations can be used -->
        <processor type="Coveo.SearchProvider.Processors.CoveoRecommendationsWarningProcessor, Coveo.SearchProvider" />
      </getContentEditorWarnings>
      <getPageEditorNotifications>
        <!-- The CoveoRecommendationsWarningProcessor validates that the Coveo ML Recommendations can be used -->
        <processor type="Coveo.SearchProvider.Processors.CoveoRecommendationsWarningProcessor, Coveo.SearchProvider" />
      </getPageEditorNotifications>
      <startAnalytics>
        <!-- The ExcludeCoveoUserAgentProcessor stops the pipeline when the request comes from the Coveo user agent -->
        <processor patch:before="*[1]" type="Coveo.Analytics.Processors.ExcludeCoveoUserAgentProcessor, Coveo.Analytics" />
      </startAnalytics>
      <!-- Pipeline receiving an item before it is processed for indexing -->
      <coveoItemProcessingPipeline>
      </coveoItemProcessingPipeline>
      <!-- Pipeline receiving an item after being processed, just before it is send to be indexed -->
      <coveoPostItemProcessingPipeline>
        <processor type="Coveo.SearchProvider.Processors.AddCoveoVersionTag, Coveo.SearchProviderBase" />
      </coveoPostItemProcessingPipeline>
      <!-- Pipeline to convert the fields from Sitecore to a format handled by Coveo -->
      <coveoFieldConverterPipeline>
        <processor type="Coveo.SearchProvider.Processors.SkipMetadataNamesProcessor, Coveo.SearchProviderBase" />
        <processor type="Coveo.SearchProvider.Processors.FieldValueConverterProcessor, Coveo.SearchProviderBase" />
      </coveoFieldConverterPipeline>
      <!-- Sitecore pipeline to get the index name corresponding to the currently selected item or context database.
           This pipeline can return search indexes from any provider. -->
      <contentSearch.getContextIndex>
        <processor type="Coveo.SearchProvider.Processors.FetchCoveoIndex, Coveo.SearchProviderBase" />
      </contentSearch.getContextIndex>
      <!-- Coveo pipeline used to retrieve the Coveo index name corresponding to the currently selected item or context database.
           This pipeline should only return names for the Coveo search indexes. -->
      <coveoGetContextCoveoIndex>
        <processor type="Coveo.SearchProvider.Processors.FetchCoveoIndexOnly, Coveo.SearchProvider" />
        <!-- Processor used to fallback on an index when the current context item is not a valid Indexable. -->
        <processor type="Coveo.SearchProvider.Processors.FallbackOnFirstIndexWithSameDatabaseProcessor, Coveo.SearchProvider" />
      </coveoGetContextCoveoIndex>
      <!-- Coveo pipeline used to retrieve the fields to index for a regular search index. -->
      <coveoIndexingGetFields>
        <!-- The AddSpecialFieldsProcessor adds the Sitecore built-in fields to the search index. -->
        <processor type="Coveo.AbstractLayer.Processors.Indexing.Fields.AddSpecialFieldsProcessor, Coveo.AbstractLayer" />
        <!-- The AddComputedFieldsProcessor adds the computed fields to the search index. -->
        <processor type="Coveo.AbstractLayer.Processors.Indexing.Fields.AddComputedFieldsProcessor, Coveo.AbstractLayer" />
        <!-- The AddAnalyticsFieldsProcessor adds fields related to Sitecore Analytics to the search index. Those fields are used by the personalization features. -->
        <processor type="Coveo.AbstractLayer.Processors.Indexing.Fields.AddAnalyticsFieldsProcessor, Coveo.AbstractLayer" />
        <!-- The IncludeFieldsFromConfigOnlyProcessor adds the included fields to the search index. If at least one included field is specified, the processor stops the pipeline. -->
        <processor type="Coveo.AbstractLayer.Processors.Indexing.Fields.IncludeFieldsFromConfigOnlyProcessor, Coveo.AbstractLayer" />
        <!-- The AddExternalFieldsProcessor adds the fields declared in the ExternalFields element to the search index. -->
        <processor type="Coveo.AbstractLayer.Processors.Indexing.Fields.AddExternalFieldsProcessor, Coveo.AbstractLayer" />
        <!-- The AddFieldMapFieldsProcessor adds the fields declared in the field map to the search index. -->
        <processor type="Coveo.AbstractLayer.Processors.Indexing.Fields.AddFieldMapFieldsProcessor, Coveo.AbstractLayer" />
        <!-- The ExcludeFieldsFromConfigProcessor excludes the fields defined in the ExcludeField element from the search index. -->
        <processor type="Coveo.AbstractLayer.Processors.Indexing.Fields.ExcludeFieldsFromConfigProcessor, Coveo.AbstractLayer" />
      </coveoIndexingGetFields>
      <!-- Coveo pipeline used to retrieve the templates with the fields that should be indexed. -->
      <coveoIndexingGetTemplates>
        <!-- The IncludeTemplatesFromConfigOnlyProcessor adds the included templates to the list. If at least one included template is specified, the processor stops the pipeline. -->
        <processor type="Coveo.AbstractLayer.Processors.Indexing.Templates.IncludeTemplatesFromConfigOnlyProcessor, Coveo.AbstractLayer" />
        <!-- The AddTemplatesForIndexedItems processor scans the items to index and gathers the templates that are being used. -->
        <processor type="Coveo.SearchProvider.Processors.Indexing.Templates.AddTemplatesForIndexedItems, Coveo.SearchProviderBase">
          <ApplyInboundFilter>true</ApplyInboundFilter>
        </processor>
        <!-- The IncludeBaseTemplates processor ensures that all necessary base templates are added for the templates included so far. -->
        <processor type="Coveo.SearchProvider.Processors.Indexing.Templates.IncludeBaseTemplates, Coveo.SearchProviderBase" />
        <!-- The ExcludeTemplatesFromConfigProcessor excludes the templates defined in the ExcludeTemplate element from the template list. -->
        <processor type="Coveo.AbstractLayer.Processors.Indexing.Templates.ExcludeTemplatesFromConfigProcessor, Coveo.AbstractLayer" />
      </coveoIndexingGetTemplates>
      <!-- Pipeline used to translate the field names from Sitecore to a format supported by Coveo -->
      <coveoFieldNameTranslatorPipeline>
        <processor type="Coveo.AbstractLayer.Pipeline.CoveoFieldNameTranslatorProcessor, Coveo.AbstractLayer" />
      </coveoFieldNameTranslatorPipeline>
      <!-- Pipeline used to automatically boost search results according to the Analytics data. -->
      <coveoAutomaticBoostingPipeline>
        <processor type="Coveo.SearchProvider.Processors.AutomaticBoostingProcessor, Coveo.SearchProviderBase" />
      </coveoAutomaticBoostingPipeline>
      <!-- Pipeline used to modify the Sitecore fields configuration before the field set is created/updated in the index. -->
      <coveoBeforeUpdatingIndexFields>
      </coveoBeforeUpdatingIndexFields>
      <!-- Pipeline used to resolve an item site. This pipeline is invoked when indexing documents to compute the item URI. -->
      <coveoResolveItemSite>
        <processor type="Coveo.SearchProvider.Processors.ResolveItemSiteProcessor, Coveo.SearchProviderBase" />
      </coveoResolveItemSite>
      <coveoResolveItemUniqueUri>
        <processor type="Coveo.SearchProvider.Processors.ResolveItemUniqueUriProcessor, Coveo.SearchProviderBase" />
      </coveoResolveItemUniqueUri>
      <!-- Each processor in this pipeline can use the following includedIndexNames and excludedIndexNames element. -->
      <!-- Add this to apply the processor only to the specified indexes. -->
      <!-- <includedIndexNames hint="list">
             <indexName>Coveo_web_index</indexName>
           </includedIndexNames> -->
      <!-- Add this to apply the processor to all indexes but those specified in the list. -->
      <!-- <excludedIndexNames hint="list">
             <indexName>Coveo_master_index</indexName>
           </excludedIndexNames> -->
      <!-- Exclusion has priority over inclusion. This means that if the same index is specified both in inclusion and exclusion, the processor will not be applied. -->
      <coveoInboundFilterPipeline>
        <processor type="Coveo.SearchProvider.InboundFilters.ApplySitecoreInboundFilterProcessor, Coveo.SearchProviderBase" />
        <!-- This processor removes all of the Coveo Data Source items that are never needed in the index. -->
        <processor type="Coveo.SearchProvider.InboundFilters.ExcludeCoveoDataSourceItemsInboundFilter, Coveo.SearchProviderBase" />
        <!-- This processor ensures that only the latest version of a Sitecore item is indexed. -->
        <processor type="Coveo.SearchProvider.CoveoInboundFilters.IndexLatestVersionInboundFilter, Coveo.SearchProviderBase" />
        <!-- This processor executes the processors located in the coveoSitecoreInboundFilterPipeline pipeline below. -->
        <processor type="Coveo.SearchProvider.InboundFilters.InvokeSitecoreInboundFilterPipeline, Coveo.SearchProviderBase" />
      </coveoInboundFilterPipeline>
      <!-- Pipeline used to execute Sitecore inbound filter processors. This pipeline is run by the InvokeSitecoreInboundFilterPipeline processor in the coveoInboundFilterPipeline pipeline. -->
      <!-- Add your existing Sitecore inbound filter processors to be run only on Coveo indexes. -->
      <coveoSitecoreInboundFilterPipeline>
      </coveoSitecoreInboundFilterPipeline>
      <initialize>
        <processor type="Coveo.SearchProvider.Processors.EnableTls12Processor, Coveo.SearchProviderBase" />
      </initialize>
      <!-- Pipeline used to modify the user context. -->
      <coveoUserContext>
      </coveoUserContext>
    </pipelines>
    <coveo>
      <caches>
        <fieldsCache type="Coveo.Framework.Caching.FieldsCache, Coveo.Framework" singleInstance="true" />
      </caches>
      <cloudPlatformCommunicationFactory type="Coveo.CloudPlatformClient.Communication.CloudPlatformCommunicationFactory, Coveo.CloudPlatformClient">
        <cloudCommunicationConfiguration type="Coveo.CloudPlatformClient.Configuration.CloudCommunicationConfiguration, Coveo.CloudPlatformClient" />
      </cloudPlatformCommunicationFactory>
      <databasePropertyStore type="Sitecore.ContentSearch.Maintenance.IndexDatabasePropertyStore, Sitecore.ContentSearch">
        <Key>$(1)</Key>
        <Database>web</Database>
      </databasePropertyStore>
      <defaultIndexConfiguration type="Coveo.AbstractLayer.CoveoDefaultIndexConfiguration, Coveo.AbstractLayer">
        <param desc="coveoReflectionFactory" type="Coveo.Framework.Utils.CoveoReflectionFactory, Coveo.Framework" />
        <indexCommunicationFactory ref="coveo/cloudPlatformCommunicationFactory"/>
        <cloudPlatformConfiguration ref="coveo/cloudPlatformConfiguration"/>
        <!-- Coveo security configuration -->
        <securityConfiguration type="Coveo.Framework.Configuration.SecurityConfiguration, Coveo.Framework">
          <skipSitecoreCredentialsUpdate role:require="ContentDelivery">true</skipSitecoreCredentialsUpdate>
          <skipSitecoreLoginCheck role:require="ContentDelivery">true</skipSitecoreLoginCheck>
        </securityConfiguration>
        <!-- Coveo Query configuration -->
        <queryConfiguration type="Coveo.Framework.Configuration.QueryConfiguration, Coveo.Framework">
          <!-- The defaultNumberOfResults element defines the default maximum number of results that are returned from a LINQ statement. -->
          <defaultNumberOfResults>10</defaultNumberOfResults>
          <!-- The defaultNumberOfFacetValues element defines the default maximum number of facet values that are returned from a LINQ statement. -->
          <defaultNumberOfFacetValues>16</defaultNumberOfFacetValues>
          <!-- The enableDuplicateFiltering element defines whether duplicates should be filtered by the index in queries. -->
          <enableDuplicateFiltering>false</enableDuplicateFiltering>
          <!-- The enableSitecoreBoosting element defines whether or not Sitecore boosting should be used in queries. -->
          <enableSitecoreBoosting>true</enableSitecoreBoosting>
          <!-- The expandQueries element defines whether or not to expand queries (i.e. uses the thesaurus). -->
          <expandQueries>true</expandQueries>
          <!-- The excerptLength element defines the maximum length (in number of characters) of the document excerpt. -->
          <excerptLength>200</excerptLength>
          <!-- The queryPipelineName element defines the query pipeline name to use in queries. Leave this field empty to use the default query pipeline. -->
          <queryPipelineName></queryPipelineName>
          <!-- The retrieveFirstSentences element defines whether the first sentences of the document content are returned. The length of the first sentences
               is defined by the excerptLength element. -->
          <retrieveFirstSentences>false</retrieveFirstSentences>
          <!-- The summaryLength element defines the maximum length (in number of characters) of the document summary. -->
          <summaryLength>0</summaryLength>
        </queryConfiguration>
        <!-- This setting must be set to 'true' in order to index profile-related fields. These fields are mandatory for automatic boosting to work properly.
             Otherwise, set it to 'false' to prevent those fields from being indexed. One benefit of this is that indexing speed and query time will improve. -->
        <indexAnalyticsFields>false</indexAnalyticsFields>
        <!-- Set this to false if you want to disable indexing of Coveo-specific fields. -->
        <indexCoveoFields>true</indexCoveoFields>
        <!-- Set this to true if you want referrer items to be indexed on an item update -->
        <indexReferrerItemsOnUpdate>false</indexReferrerItemsOnUpdate>
        <!-- The farmName element specifies the name that represents the Sitecore environment.
             When specified, this name is used to uniquely name various resources such as the index sources,
             fieldsets, security provider, and user identity. -->
        <farmName></farmName>
        <!-- The requirementsInvalidateDelay elements sets the amount of time, in seconds, before the
             index requirements are invalidated. The index requirements includes the index sources, the fieldsets, security provider, and user identity. -->
        <requirementsInvalidateDelay>60</requirementsInvalidateDelay>
        <!-- The securityProviderName element sets a static name for the CES security provider. This is useful when many Sitecore instances
             are querying the same Coveo indexes. It is often required when configuring Content Management and Content Delivery instances. -->
        <securityProviderName></securityProviderName>
        <!-- The sitecoreUsername element specifies the user identity used by the CES security provider. -->
        <sitecoreUsername>sitecore\admin</sitecoreUsername>
        <!-- The serverUrl element specifies the URL where other hosts can connect to the Sitecore instance.
             This should be specified when CES is on a separate host than the Sitecore instance. -->
        <serverUrl></serverUrl>
        <!-- Specifies whether the index Initialize() method should be called as soon as the index is added, or if it should wait for an external trigger. -->
        <initializeOnAdd>true</initializeOnAdd>
        <fieldReaders type="Sitecore.ContentSearch.FieldReaders.FieldReaderMap, Sitecore.ContentSearch">
          <param desc="id">coveoFieldReaderMap</param>
          <mapFieldByTypeName hint="raw:AddFieldReaderByFieldTypeName">
            <fieldReader fieldTypeName="checkbox" fieldReaderType="Sitecore.ContentSearch.FieldReaders.CheckboxFieldReader, Sitecore.ContentSearch" />
            <fieldReader fieldTypeName="datetime" fieldReaderType="Coveo.SearchProvider.FieldReaders.DateTimeFieldReader, Coveo.SearchProviderBase" />
            <fieldReader fieldTypeName="date" fieldReaderType="Coveo.SearchProvider.FieldReaders.DateFieldReader, Coveo.SearchProviderBase" />
          </mapFieldByTypeName>
        </fieldReaders>
        <fieldMap type="Coveo.SearchProvider.CoveoFieldMap, Coveo.SearchProvider">
          <param desc="coveoReflectionFactory" type="Coveo.Framework.Utils.CoveoReflectionFactory, Coveo.Framework" />
          <fieldNames hint="raw:AddFieldByFieldName">
            <fieldType fieldName="_id" includeForFreeTextSearch="true" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" type="Sitecore.Data.ID, Sitecore.Kernel" returnType="System.String" />
            <fieldType fieldName="_uniqueid" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" type="Sitecore.Data.ItemUri, Sitecore.Kernel" returnType="System.String" />
            <fieldType fieldName="name" isFacet="true" isSortable="true" includeForFreeTextSearch="true" isMultiValue="false" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" />
            <fieldType fieldName="fullpath" isSortable="false" isFacet="true" includeForFreeTextSearch="false" isMultiValue="false" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" />
            <fieldType fieldName="_fullpath" isSortable="false" isFacet="true" includeForFreeTextSearch="false" isMultiValue="false" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" />
            <fieldType fieldName="_group" isSortable="false" isFacet="true" includeForFreeTextSearch="false" isMultiValue="false" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" />
            <fieldType fieldName="_name" isFacet="true" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" />
            <fieldType fieldName="_displayname" isFacet="true" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" />
            <fieldType fieldName="_path" isFacet="true" isMultiValue="true" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" />
            <fieldType fieldName="_content" isFacet="true" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" />
            <fieldType fieldName="alltemplates" isMultiValue="true" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" />
            <fieldType fieldName="__smallcreateddate" sitecoreFormat="yyyyMMddTHHmmZ" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" />
            <fieldType fieldName="__smallupdateddate" sitecoreFormat="yyyyMMddTHHmmZ" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" />
            <fieldType fieldName="hasLayout" useForRanking="false" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" />
            <fieldType fieldName="isMediaItem" useForRanking="false" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" />
            <fieldType fieldName="site" isMultiValue="true" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" />

            <fieldType fieldName="attachmentparentid" isSourceSpecific="true" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" />
            <fieldType fieldName="author" isSourceSpecific="true" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" />
            <fieldType fieldName="clickableuri" isSourceSpecific="true" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" />
            <fieldType fieldName="collection" isSourceSpecific="true" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" />
            <fieldType fieldName="concepts" isSourceSpecific="true" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" />
            <fieldType fieldName="date" isSourceSpecific="true" type="System.DateTime" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" />
            <fieldType fieldName="filetype" isSourceSpecific="true" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" />
            <fieldType fieldName="indexeddate" isSourceSpecific="true" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" />
            <fieldType fieldName="isattachment" isSourceSpecific="true" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" />
            <fieldType fieldName="language" isSourceSpecific="true" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" />
            <fieldType fieldName="printableuri" isSourceSpecific="true" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" />
            <fieldType fieldName="rowid" isSourceSpecific="true" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" />
            <fieldType fieldName="size" isSourceSpecific="true" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" />
            <fieldType fieldName="source" isSourceSpecific="true" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" />
            <fieldType fieldName="title" isSourceSpecific="true" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" />
            <fieldType fieldName="topparent" isSourceSpecific="true" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" />
            <fieldType fieldName="topparentid" isSourceSpecific="true" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" />
            <fieldType fieldName="transactionid" isSourceSpecific="true" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" />
            <fieldType fieldName="uri" isSourceSpecific="true" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" />
            <fieldType fieldName="urihash" isSourceSpecific="true" settingType="Coveo.Framework.Configuration.FieldConfiguration, Coveo.Framework" />
          </fieldNames>
          <externalFields hint="raw:AddExternalField">
            <field fieldName="permanentid" />
          </externalFields>
        </fieldMap>
        <indexFieldStorageValueFormatter type="Coveo.SearchProvider.CoveoIndexFieldStorageValueFormatter, Coveo.SearchProvider" >
          <param desc="coveoReflectionFactory" type="Coveo.Framework.Utils.CoveoReflectionFactory, Coveo.Framework" />
          <conversionTypes hint="raw:AddConverter">
            <conversionType inputType="System.Guid" type="Sitecore.ContentSearch.Converters.IndexFieldGuidValueConverter, Sitecore.ContentSearch" />
            <conversionType inputType="Sitecore.Data.ID" type="Sitecore.ContentSearch.Converters.IndexFieldIDValueConverter, Sitecore.ContentSearch" />
            <conversionType inputType="Sitecore.ContentSearch.SitecoreItemId" type="Sitecore.ContentSearch.Converters.IndexFieldSitecoreItemIDValueConvertor, Sitecore.ContentSearch">
              <param type="Sitecore.ContentSearch.Converters.IndexFieldIDValueConverter, Sitecore.ContentSearch" />
            </conversionType>
            <conversionType inputType="Sitecore.ContentSearch.SitecoreItemUniqueId" type="Sitecore.ContentSearch.Converters.IndexFieldSitecoreItemUniqueIDValueConvertor, Sitecore.ContentSearch">
              <param type="Sitecore.ContentSearch.Converters.IndexFieldItemUriValueConverter, Sitecore.ContentSearch" />
            </conversionType>
            <conversionType inputType="Sitecore.Data.ItemUri" type="Sitecore.ContentSearch.Converters.IndexFieldItemUriValueConverter, Sitecore.ContentSearch" />
            <conversionType inputType="Sitecore.Data.ShortID" type="Sitecore.ContentSearch.Converters.IndexFieldShortIDValueConverter, Sitecore.ContentSearch" />
            <conversionType inputType="System.Globalization.CultureInfo" type="Sitecore.ContentSearch.Converters.IndexFieldCultureInfoValueConverter, Sitecore.ContentSearch" />
            <conversionType inputType="Sitecore.ContentSearch.IIndexableId, Sitecore.ContentSearch" type="Sitecore.ContentSearch.Converters.IndexableIdConverter, Sitecore.ContentSearch" />
            <conversionType inputType="Sitecore.ContentSearch.IIndexableUniqueId, Sitecore.ContentSearch" type="Sitecore.ContentSearch.Converters.IndexableUniqueIdConverter, Sitecore.ContentSearch" />
            <conversionType inputType="System.DateTimeOffset" type="Coveo.Framework.Conversion.DateTimeOffsetValueConverter, Coveo.Framework" />
            <conversionType inputType="System.TimeSpan" type="Coveo.Framework.Conversion.TimeSpanValueConverter, Coveo.Framework" />
            <conversionType inputType="System.DateTime" type="Coveo.Framework.Conversion.DateTimeValueConverter, Coveo.Framework" />
            <conversionType inputType="System.Boolean" type="Coveo.Framework.Conversion.BooleanValueConverter, Coveo.Framework" />
            <conversionType inputType="System.Single" type="Coveo.Framework.Conversion.FloatValueConverter, Coveo.Framework" />
            <conversionType inputType="System.Decimal" type="Coveo.Framework.Conversion.DecimalValueConverter, Coveo.Framework" />
            <conversionType inputType="System.Double" type="Coveo.Framework.Conversion.DoubleValueConverter, Coveo.Framework" />
          </conversionTypes>
        </indexFieldStorageValueFormatter>
        <virtualFields type="Sitecore.ContentSearch.VirtualFieldProcessorMap, Sitecore.ContentSearch">
          <processors hint="raw:AddFromConfiguration">
            <virtualFieldProcessor fieldName="daterange" type="Sitecore.ContentSearch.VirtualFields.DateRangeFieldProcessor, Sitecore.ContentSearch" />
            <virtualFieldProcessor fieldName="_lastestversion" type="Sitecore.ContentSearch.VirtualFields.LatestVersionFieldProcessor, Sitecore.ContentSearch" />
            <virtualFieldProcessor fieldName="_url" type="Sitecore.ContentSearch.VirtualFields.UniqueIdFieldProcessor, Sitecore.ContentSearch" />
            <virtualFieldProcessor fieldName="_content" type="Coveo.SearchProvider.Processors.ContentFieldProcessor, Coveo.SearchProviderBase" />
          </processors>
        </virtualFields>
        <documentOptions type="Sitecore.ContentSearch.DocumentBuilderOptions, Sitecore.ContentSearch">
          <indexAllFields>true</indexAllFields>
          <fields hint="raw:AddComputedIndexField">
            <field fieldName="calculateddimension">Sitecore.ContentSearch.ComputedFields.CalculatedDimension,Sitecore.ContentSearch</field>
            <field fieldName="istemplate">Sitecore.ContentSearch.ComputedFields.IsTemplate,Sitecore.ContentSearch</field>
            <field fieldName="haschildren">Sitecore.ContentSearch.ComputedFields.HasChildren,Sitecore.ContentSearch</field>
            <field fieldName="lock">Sitecore.ContentSearch.ComputedFields.IsLocked,Sitecore.ContentSearch</field>
            <field fieldName="parsedcreatedby">Sitecore.ContentSearch.ComputedFields.ParsedCreatedBy,Sitecore.ContentSearch</field>
            <field fieldName="parsedupdatedby">Sitecore.ContentSearch.ComputedFields.ParsedUpdatedBy,Sitecore.ContentSearch</field>
            <field fieldName="parsedlanguage">Sitecore.ContentSearch.ComputedFields.ParsedLanguage,Sitecore.ContentSearch</field>
            <field fieldName="site">Sitecore.ContentSearch.ComputedFields.Site,Sitecore.ContentSearch</field>
            <field fieldName="sizerange">Sitecore.ContentSearch.ComputedFields.FileSizeGrouping,Sitecore.ContentSearch</field>
            <field fieldName="urllink">Sitecore.ContentSearch.ComputedFields.UrlLink,Sitecore.ContentSearch</field>
            <field fieldName="isbucket_text">Sitecore.ContentSearch.ComputedFields.IsBucket,Sitecore.ContentSearch</field>
            <field fieldName="alltemplates">Sitecore.ContentSearch.ComputedFields.AllTemplates, Sitecore.ContentSearch</field>
          </fields>
          <exclude hint="list:AddExcludedTemplate">
            <mediaFolder>{FE5DD826-48C6-436D-B87A-7C4210C7413B}</mediaFolder>
            <bucketFolder>{ADB6CA4F-03EF-4F47-B9AC-9CE2BA53FF97}</bucketFolder>
          </exclude>
          <exclude hint="list:AddExcludedField" ref="mandatory, do not delete" factory="excludedFieldsFactory" />
          <include hint="list:AddIncludedField" />
        </documentOptions>
        <searchServiceProvider type="Coveo.SearchServiceProvider.Rest.ClientSessionWrapperFactory, Coveo.SearchServiceProvider.Rest" />
      </defaultIndexConfiguration>
      <retryGroups>
        <throttlingAndTimeout type="Coveo.Framework.Utils.Rest.HttpWaitAndRetryGroup, Coveo.Framework">
          <retryStrategy type="Coveo.Framework.Utils.Rest.ExponentialBackoffRetryStrategy">
            <maximumNumberOfRetries>60</maximumNumberOfRetries>
            <maximumWaitTimePerRetry>00:02:00</maximumWaitTimePerRetry>
            <timeSlotDuration>00:00:01</timeSlotDuration>
          </retryStrategy>
          <conditions hint="raw:AddCondition">
            <condition statusCodes="429|502|503|504" />
          </conditions>
        </throttlingAndTimeout>
        <serverError type="Coveo.Framework.Utils.Rest.HttpWaitAndRetryGroup, Coveo.Framework">
          <retryStrategy type="Coveo.Framework.Utils.Rest.ExponentialBackoffRetryStrategy">
            <maximumNumberOfRetries>5</maximumNumberOfRetries>
            <maximumWaitTimePerRetry>00:02:00</maximumWaitTimePerRetry>
            <timeSlotDuration>00:00:01</timeSlotDuration>
          </retryStrategy>
          <conditions hint="raw:AddCondition">
            <condition statusCodes="500|507|508|509" />
          </conditions>
        </serverError>
      </retryGroups>
    </coveo>
    <contentSearch>
      <indexConfigurations>
        <indexUpdateStrategies>
          <coveoSyncMaster name="CoveoSyncMaster" type="Sitecore.ContentSearch.Maintenance.Strategies.SynchronousStrategy, Sitecore.ContentSearch">
            <param desc="database">master</param>
          </coveoSyncMaster>
          <coveoSyncMaster role:require="ContentDelivery" name="CoveoSyncMaster" type="Sitecore.ContentSearch.Maintenance.Strategies.ManualStrategy, Sitecore.ContentSearch">
            <param desc="database">
              <patch:delete />
            </param>
          </coveoSyncMaster>
          <coveoOnPublishEndAsync name="CoveoOnPublishEndAsync" type="Sitecore.ContentSearch.Maintenance.Strategies.OnPublishEndAsynchronousStrategy, Sitecore.ContentSearch">
            <param desc="database">web</param>
            <CheckForThreshold>true</CheckForThreshold>
          </coveoOnPublishEndAsync>
          <coveoOnPublishEndAsync role:require="ContentDelivery" name="CoveoOnPublishEndAsync" type="Sitecore.ContentSearch.Maintenance.Strategies.ManualStrategy, Sitecore.ContentSearch">
            <param desc="database">
              <patch:delete />
            </param>
            <CheckForThreshold>
              <patch:delete />
            </CheckForThreshold>
          </coveoOnPublishEndAsync>
        </indexUpdateStrategies>
      </indexConfigurations>
      <!-- The configuration element appears twice for these reasons:
           1. If no other search provider is defined, the type needs to be specified to create the configuration element.
           2. If an other search provider is configured already and overrides the type of the configuration element, Coveo indexes are
              added to the same configuration element as other indexes. -->
      <configuration type="Sitecore.ContentSearch.ContentSearchConfiguration, Sitecore.ContentSearch" />
      <configuration>
        <indexes hint="list:AddIndex">
          <index role:require="!ContentDelivery" id="Coveo_master_index" type="Coveo.SearchProvider.ProviderIndex, Coveo.SearchProvider" patch:before = "*[1]">
            <param desc="p_Name">$(id)</param>
            <param desc="p_PropertyStore">
              <propertyStore ref="coveo/databasePropertyStore" param1="$(id)"/>
            </param>
            <configuration ref="coveo/defaultIndexConfiguration">
              <!-- Whether to push permissions when rebuilding the index. -->
              <pushPermissionsOnRebuild>true</pushPermissionsOnRebuild>
              <queryConfiguration ref="coveo/defaultIndexConfiguration/queryConfiguration">
                <!-- The maximumAge element defines the delay that query results are cached before being refreshed by a new query on the index. -->
                <maximumAge>00:00:00</maximumAge>
              </queryConfiguration>
            </configuration>
            <locations hint="list:AddCrawler">
              <crawler name="ContentCrawler" type="Sitecore.ContentSearch.SitecoreItemCrawler, Sitecore.ContentSearch">
                <database>master</database>
                <root>/sitecore/content</root>
                <stopOnError>true</stopOnError>
              </crawler>
              <crawler name="MediaLibraryCrawler" type="Sitecore.ContentSearch.SitecoreItemCrawler, Sitecore.ContentSearch">
                <database>master</database>
                <root>/sitecore/media library/Files</root>
                <stopOnError>true</stopOnError>
              </crawler>
            </locations>
            <propertyStore ref="coveo/databasePropertyStore" param1="$(id)"/>
            <strategies hint="list:AddStrategy">
              <strategy ref="contentSearch/indexConfigurations/indexUpdateStrategies/coveoSyncMaster"/>
            </strategies>
            <enableItemLanguageFallback>false</enableItemLanguageFallback>
            <enableFieldLanguageFallback>false</enableFieldLanguageFallback>
          </index>
          <index id="Coveo_web_index" type="Coveo.SearchProvider.ProviderIndex, Coveo.SearchProvider" patch:before = "*[2]">
            <param desc="p_Name">$(id)</param>
            <param desc="p_PropertyStore">
              <propertyStore ref="coveo/databasePropertyStore" param1="$(id)"/>
            </param>
            <configuration ref="coveo/defaultIndexConfiguration" />
            <locations hint="list:AddCrawler">
              <crawler name="ContentCrawler" type="Sitecore.ContentSearch.SitecoreItemCrawler, Sitecore.ContentSearch">
                <database>web</database>
                <root>/sitecore/content</root>
                <stopOnError>true</stopOnError>
              </crawler>
              <crawler name="MediaLibraryCrawler" type="Sitecore.ContentSearch.SitecoreItemCrawler, Sitecore.ContentSearch">
                <database>web</database>
                <root>/sitecore/media library/Files</root>
                <stopOnError>true</stopOnError>
              </crawler>
            </locations>
            <propertyStore ref="coveo/databasePropertyStore" param1="$(id)"/>
            <strategies hint="list:AddStrategy">
              <strategy ref="contentSearch/indexConfigurations/indexUpdateStrategies/coveoOnPublishEndAsync"/>
            </strategies>
            <enableItemLanguageFallback>false</enableItemLanguageFallback>
            <enableFieldLanguageFallback>false</enableFieldLanguageFallback>
          </index>
        </indexes>
      </configuration>
    </contentSearch>
    <settings>
      <setting name="Coveo.Indexing.PreferSourceSpecificFields" value="false" />
      <setting role:require="ContentDelivery" name="Coveo.Framework.WriteToPropertyStoreDisabled" value="true" />
    </settings>
  </sitecore>
</configuration>